{"id":"821094451476848226","name":"Figmagic — Design System template 4.0","lastUpdateDate":"2020-10-16T06:40:14.642Z","publisherHandle":"MikaelVesavuori","publisherImage":"https://s3-alpha.figma.com/profile/ddd85219-4c0c-492d-8fa0-ba3daaab845c","publisherId":"86803","publisherName":"Mikael Vesavuori","thumbnailUrl":"https://s3-alpha.figma.com/hub/file/499293110/a020666d-87c7-4cc1-8144-407616f4fa91-cover.png","description":"<p>This is version 4.0+ of the example design system to generate tokens with Figmagic (<a href=\"https://github.com/mikaelvesavuori/figmagic\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">https://github.com/mikaelvesavuori/figmagic</a> or <a href=\"https://figmagic.com\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">https://figmagic.com</a>).</p><p><br></p><p>Use this is a template or boilerplate to set up your own design system and token pipeline!</p><p><br></p><p>-----</p><p><br></p><p>Generate design tokens, export graphics, and extract design token-driven React components from your Figma documents. Originally inspired by Salesforce Theo (<a href=\"https://github.com/salesforce-ux/theo\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">https://github.com/salesforce-ux/theo</a>).</p><p><br></p><p>Figmagic promotes a structured way of assembling design systems. Following the primary principle of atomic design, Figmagic wants you to build from the bottom up, beginning with decomposing the tokens. Tokens shape elements, which form components, that are ordered in compositions, which get presented in views... You know the drill, though I am switching Brad Frost's nomenclature into something more front-end friendly.</p><p><br></p><p>When it comes to code generation, Figmagic tries to do this in a better way. Instead of over-eagerly promoting hardcoded code generation from huge and complex components, Figmagic tries to competently, or at least \"mostly-right\", handle automation for things that should not be too context-dependent or manual input-heavy. Code should also be as close to \"normal\" as possible—meaning that generated code binds values to tokens and not some random px values as other platforms do. All of this can happen because Figmagic assumes a way of working that respects standard CSS and HTML: no magic trickery! Figmagic avoids some of the cognitive and technical overhead by introducing a concept called <strong>**Elements**</strong>, which are Figmagic-compliant components that can be output into code. By composing larger components out of simple Elements, code generation is made much more manageable while also promoting much more structured design.</p><p><br></p><p>Figmagic does not aim at completely removing designers or developers: It just aims to move them closer, while eliminating any of the tedious busywork that has grown around front-end development.</p><p><br></p><p>Code generation is done into the following files:</p><p>- React</p><p>- Styled Components</p><p>- Storybook</p><p>- CSS (css-in-js type)</p><p>- Markdown description</p><p><br></p><p>You can currently extract design tokens for:</p><p><br></p><p>- Colors</p><p>- Font Sizes</p><p>- Spacing</p><p>- Font Weights</p><p>- Line Heights</p><p>- Font Families</p><p>- Letter Spacings</p><p>- Z Indices</p><p>- Radii</p><p>- Border Widths</p><p>- Shadows (currently supports single/multiple Drop Shadows)</p><p>- Opacities</p><p>- Durations (for animations)</p><p>- Delays (for animations)</p><p>- Easing functions (for animations)</p><p>- Media Queries</p><p><br></p><p>A typical use-case for the generated documents is to feed the extracted values into CSS systems that support external values (such as Styled Components, Emotion, Styled System, any other CSS-in-JS libraries, or maybe even Sass).</p>","url":"https://www.figma.com/community/file/821094451476848226"}
